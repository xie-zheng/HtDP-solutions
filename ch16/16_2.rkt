#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 80 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 17 #"PragmataPro Mono\0"
0 11 90 -1 90 -1 1 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 106 141 200 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 106 141 200 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
28 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
51 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
32 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 1006 0 4 3 85
(4
 #";; The first three lines of this file were inserted by DrRacket. They"
 #" record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(5
 #";; about the language level of this file in a form that our tools can"
 #" easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 83
(6
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modname"
 #" 16_2) (read-case-"
) 0 0 4 3 254
(7
 #"sensitive #t) (teachpacks ((lib \"web-io.rkt\" \"teachpack\" \"2htdp"
 #"\") (lib \"image.rkt\" \"teachpack\" \"2htdp\"))) (htdp-settings #(#t"
 #" constructor repeating-decimal #f #t none #f ((lib \"web-io.rkt\" \"t"
 #"eachpack\" \"2htdp\") (lib \"image.rkt\" \"teachpack\" \"2htdp\")) #f"
 #")))"
) 0 0 4 29 1 #"\n"
0 0 18 3 7 #"; ex258"
0 0 28 29 1 #"\n"
0 0 18 3 27 #"; Image Posn Posn -> Image "
0 0 28 29 1 #"\n"
0 0 18 3 48 #"; draws a red line from Posn p to Posn q into im"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 11 #"render-line"
0 0 28 3 1 #" "
0 0 14 3 2 #"im"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 1 #" "
0 0 14 3 1 #"q"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 10 #"scene+line"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"   "
0 0 14 3 2 #"im"
0 0 28 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 3 #") ("
0 0 14 3 6 #"posn-x"
0 0 28 3 1 #" "
0 0 14 3 1 #"q"
0 0 28 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 28 3 1 #" "
0 0 14 3 1 #"q"
0 0 28 3 2 #") "
0 0 20 3 5 #"\"red\""
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 17 #"; Polygon -> Posn"
0 0 28 29 1 #"\n"
0 0 18 3 24 #"; extract the last point"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 4 #"last"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 5 #"third"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 4 #"last"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 24 #"; Image Polygon -> Image"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 12 #"render-poly*"
0 0 28 3 1 #" "
0 0 14 3 3 #"img"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"local"
0 0 28 3 2 #" ("
0 0 18 3 35 #"; 1. extracts the first item from p"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 11 #"first-point"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"          "
0 0 18 3 34 #"; 2. extracts the last item from p"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 10 #"last-point"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 4 #"last"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"          "
0 0 18 3 33 #"; Image [NEList-of Posn] -> Image"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"          "
0 0 18 3 37 #"; connects the Posns in p in an image"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 12 #"connect-dots"
0 0 28 3 1 #" "
0 0 14 3 3 #"img"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"              [("
0 0 14 3 6 #"empty?"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 3 #")) "
0 0 14 3 3 #"img"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 11 #"render-line"
0 0 28 3 2 #" ("
0 0 14 3 12 #"connect-dots"
0 0 28 3 1 #" "
0 0 14 3 3 #"img"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 34 #"                                 ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 34 #"                                 ("
0 0 14 3 6 #"second"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 6 #"))])))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 8 #"; - IN -"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 11 #"render-line"
0 0 28 3 2 #" ("
0 0 14 3 12 #"connect-dots"
0 0 28 3 1 #" "
0 0 14 3 3 #"img"
0 0 28 3 1 #" "
0 0 14 3 1 #"p"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                 "
0 0 14 3 11 #"first-point"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                 "
0 0 14 3 10 #"last-point"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 32 #"; [X] [List-of X] -> [List-of X]"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 8 #"make-set"
0 0 28 3 1 #" "
0 0 14 3 2 #"lx"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 2 #"lx"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 2 #"lx"
0 0 28 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 2 #"lx"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 8 #"make-set"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 2 #"lx"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 2 #"lx"
0 0 28 3 3 #") ("
0 0 14 3 8 #"make-set"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 2 #"lx"
0 0 28 3 7 #"))))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 7 #"; ex259"
0 0 28 29 1 #"\n"
0 0 18 3 28 #"; String -> [List-of String]"
0 0 28 29 1 #"\n"
0 0 18 3 33 #"; Word Game(rearranging the word)"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 12 #"arrangements"
0 0 28 3 1 #" "
0 0 14 3 1 #"w"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"local"
0 0 28 3 2 #" ("
0 0 18 3 10 #"; - Data -"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"          "
0 0 18 3 38 #"; represents word in [List-of 1String]"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 4 #"word"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 7 #"explode"
0 0 28 3 1 #" "
0 0 14 3 1 #"w"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"          "
0 0 18 3 14 #"; - Function -"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"          "
0 0 18 3 16 #"; Word -> String"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 12 #"word->string"
0 0 28 3 1 #" "
0 0 14 3 1 #"w"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 7 #"implode"
0 0 28 3 1 #" "
0 0 14 3 1 #"w"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"          "
0 0 18 3 39 #"; Word [List-of Word] -> [List-of Word]"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"arranging"
0 0 28 3 1 #" "
0 0 14 3 1 #"w"
0 0 28 3 1 #" "
0 0 14 3 2 #"lw"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"              [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 1 #"w"
0 0 28 3 2 #") "
0 0 14 3 2 #"lw"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 9 #"arranging"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"w"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               ("
0 0 14 3 17 #"insert-everywhere"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"w"
0 0 28 3 2 #") "
0 0 14 3 2 #"lw"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"          "
0 0 18 3 42 #"; 1String [List-of Word] -> [List-of Word]"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"insert-everywhere"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 2 #"lw"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 16 3 5 #"local"
0 0 28 3 2 #" ("
0 0 18 3 29 #"; Word 1String Number -> Word"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                    "
0 0 18 3 34 #"; insert c to nth position in word"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 13 #"insert-helper"
0 0 28 3 1 #" "
0 0 14 3 4 #"word"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                        [("
0 0 14 3 1 #"="
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 4 #"word"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"word"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 37 #"                                    ("
0 0 14 3 13 #"insert-helper"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"word"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 51 #"                                                   "
0 0 14 3 1 #"c"
0 0 28 29 1 #"\n"
0 0 28 3 52 #"                                                   ("
0 0 14 3 1 #"-"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 7 #")))])))"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"              "
0 0 18 3 8 #"; - IN -"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 2 #"lw"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                ["
0 0 14 3 4 #"else"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 6 #"append"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 16 3 5 #"local"
0 0 28 3 2 #" ("
0 0 18 3 22 #"; extract current word"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 4 #"word"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 2 #"lw"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                          "
0 0 18 3 16 #"; Number -> Word"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                          "
0 0 18 3 34 #"; insert c to nth position in word"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"insert-at"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 13 #"insert-helper"
0 0 28 3 1 #" "
0 0 14 3 4 #"word"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                    "
0 0 18 3 8 #"; - IN -"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 10 #"build-list"
0 0 28 3 2 #" ("
0 0 14 3 1 #"+"
0 0 28 3 2 #" ("
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 4 #"word"
0 0 28 3 2 #") "
0 0 24 3 1 #"1"
0 0 28 3 2 #") "
0 0 14 3 9 #"insert-at"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 17 #"insert-everywhere"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 2 #"lw"
0 0 28 3 8 #")))]))))"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 8 #"; - IN -"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 4 #"sort"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 8 #"make-set"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 3 #"map"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"       "
0 0 14 3 12 #"word->string"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 9 #"arranging"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 4 #"word"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 4 #"word"
0 0 28 3 6 #"))))))"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"     "
0 0 14 3 8 #"string<?"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 7 #"; ex260"
0 0 28 29 1 #"\n"
0 0 18 3 17 #"; Nelon -> Number"
0 0 28 29 1 #"\n"
0 0 18 3 37 #"; determines the smallest number on l"
0 0 28 29 1 #"\n"
0 0 18 3 17 #"; Nelon -> Number"
0 0 28 29 1 #"\n"
0 0 18 3 26 #"; determines the smallest "
0 0 28 29 1 #"\n"
0 9         373 24           0 0           0 61 0 18 3 13
#"; number on l"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 3 #"inf"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 1 #"<"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 3 #"inf"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 3 #"inf"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 6 #")))]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 3 #"inf"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 5 #"local"
0 0 28 3 3 #" (("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 16 #"smallest-in-rest"
0 0 28 3 2 #" ("
0 0 14 3 3 #"inf"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 1 #"<"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 2 #") "
0 0 14 3 16 #"smallest-in-rest"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"           "
0 0 14 3 16 #"smallest-in-rest"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 2 #"25"
0 0 28 3 1 #" "
0 0 24 3 2 #"24"
0 0 28 3 1 #" "
0 0 24 3 2 #"23"
0 0 28 3 1 #" "
0 0 24 3 2 #"22"
0 0 28 3 1 #" "
0 0 24 3 2 #"21"
0 0 28 3 1 #" "
0 0 24 3 2 #"20"
0 0 28 3 1 #" "
0 0 24 3 2 #"19"
0 0 28 3 1 #" "
0 0 24 3 2 #"18"
0 0 28 3 1 #" "
0 0 24 3 2 #"17"
0 0 28 3 1 #" "
0 0 24 3 2 #"16"
0 0 28 3 1 #" "
0 0 24 3 2 #"15"
0 0 28 3 1 #" "
0 0 24 3 2 #"14"
0 0 28 3 1 #" "
0 0 24 3 2 #"13"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"                "
0 0 24 3 2 #"12"
0 0 28 3 1 #" "
0 0 24 3 2 #"11"
0 0 28 3 1 #" "
0 0 24 3 2 #"10"
0 0 28 3 1 #" "
0 0 24 3 1 #"9"
0 0 28 3 1 #" "
0 0 24 3 1 #"8"
0 0 28 3 1 #" "
0 0 24 3 1 #"7"
0 0 28 3 1 #" "
0 0 24 3 1 #"6"
0 0 28 3 1 #" "
0 0 24 3 1 #"5"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 18 3 15 #";(time (inf l))"
0 0 28 29 1 #"\n"
0 0 18 3 18 #";(time (inf.v2 l))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 7 #"; ex261"
0 0 28 29 1 #"\n"
0 0 18 3 24 #"; Inventory -> Inventory"
0 0 28 29 1 #"\n"
0 0 18 3 42 #"; creates an Inventory from an-inv for all"
0 0 28 29 1 #"\n"
0 0 18 3 42 #"; those items that cost less than a dollar"
0 0 28 29 1 #"\n"
0 9         367 24           0 0           0 60 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 8 #"extract1"
0 0 28 3 1 #" "
0 0 14 3 6 #"an-inv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 28 3 1 #" "
0 0 14 3 6 #"an-inv"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"       [("
0 0 14 3 2 #"<="
0 0 28 3 2 #" ("
0 0 14 3 8 #"IR-price"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"an-inv"
0 0 28 3 3 #")) "
0 0 24 3 3 #"1.0"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 6 #"an-inv"
0 0 28 3 3 #") ("
0 0 14 3 8 #"extract1"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"an-inv"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 8 #"extract1"
0 0 28 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 28 3 1 #" "
0 0 14 3 6 #"an-inv"
0 0 28 3 7 #"))])]))"
0           0 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 7 #"; ex262"
0 0 28 29 1 #"\n"
0 0 18 3 42 #"; Number Number Number -> [List-of Number]"
0 0 28 29 1 #"\n"
0 0 18 3 37 #"; generate nth row of identity matrix"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 11 #"identityRow"
0 0 28 3 1 #" "
0 0 14 3 4 #"size"
0 0 28 3 1 #" "
0 0 14 3 3 #"row"
0 0 28 3 1 #" "
0 0 14 3 5 #"index"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"="
0 0 28 3 1 #" "
0 0 14 3 5 #"index"
0 0 28 3 1 #" "
0 0 14 3 4 #"size"
0 0 28 3 2 #") "
0 0 24 3 1 #"'"
0 0 28 3 3 #"()]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 1 #"="
0 0 28 3 1 #" "
0 0 14 3 5 #"index"
0 0 28 3 1 #" "
0 0 14 3 3 #"row"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 2 #" ("
0 0 14 3 11 #"identityRow"
0 0 28 3 1 #" "
0 0 14 3 4 #"size"
0 0 28 3 1 #" "
0 0 14 3 3 #"row"
0 0 28 3 2 #" ("
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 14 3 5 #"index"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 2 #" ("
0 0 14 3 11 #"identityRow"
0 0 28 3 1 #" "
0 0 14 3 4 #"size"
0 0 28 3 1 #" "
0 0 14 3 3 #"row"
0 0 28 3 2 #" ("
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 14 3 5 #"index"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 7 #"))))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 38 #"; Number -> [List-of [List-of Number]]"
0 0 28 29 1 #"\n"
0 0 18 3 25 #"; creates identity matrix"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"identityM"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"local"
0 0 28 3 2 #" ("
0 0 18 3 28 #"; Number -> [List-of Number]"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"          "
0 0 18 3 29 #"; wrapper for row genneration"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 6 #"genRow"
0 0 28 3 1 #" "
0 0 14 3 3 #"row"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 11 #"identityRow"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 3 #"row"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 8 #"; - IN -"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 10 #"build-list"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #" "
0 0 14 3 6 #"genRow"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"identityM"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 28 3 2 #" ("
0 0 14 3 9 #"identityM"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 3 #") ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #" "
0 0 24 3 1 #"0"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 11 #"; ex263-266"
0 0 28 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 3 #"inf"
0 0 18 3 2 #" ("
0 0 18 3 4 #"list"
0 0 18 3 1 #" "
0 0 18 3 1 #"2"
0 0 18 3 1 #" "
0 0 18 3 5 #"1 3))"
0 0 28 29 1 #"\n"
0 0 18 3 19 #";(sup (list 2 1 3))"
0 0 28 29 1 #"\n"
0 0 18 3 3 #";(("
0 0 18 3 5 #"local"
0 0 18 3 3 #" (("
0 0 18 3 6 #"define"
0 0 18 3 2 #" ("
0 0 18 3 1 #"f"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 3 #") ("
0 0 18 3 1 #"+"
0 0 18 3 2 #" ("
0 0 18 3 1 #"*"
0 0 18 3 1 #" "
0 0 18 3 1 #"4"
0 0 18 3 2 #" ("
0 0 18 3 3 #"sqr"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 3 #")) "
0 0 18 3 1 #"3"
0 0 18 3 4 #"))) "
0 0 18 3 2 #"f)"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"; "
0 0 18 3 2 #"1)"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"(("
0 0 16 3 5 #"local"
0 0 28 3 3 #" (("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 1 #"f"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 3 #") ("
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 24 3 1 #"3"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 1 #"g"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 3 #") ("
0 0 14 3 1 #"*"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 24 3 1 #"4"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 4 #"odd?"
0 0 28 3 2 #" ("
0 0 14 3 1 #"f"
0 0 28 3 2 #" ("
0 0 14 3 1 #"g"
0 0 28 3 1 #" "
0 0 24 3 1 #"1"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"       "
0 0 14 3 1 #"f"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"       "
0 0 14 3 1 #"g"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #" "
0 0 24 3 1 #"2"
0 0 28 3 1 #")"
0           0
